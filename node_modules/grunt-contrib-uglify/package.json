{
  "name": "grunt-contrib-uglify",
  "description": "Minify javascript files with UglifyJS",
  "version": "1.0.2",
  "author": {
    "name": "Grunt Team",
    "url": "http://gruntjs.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/gruntjs/grunt-contrib-uglify"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.10.0"
  },
  "main": "tasks/uglify.js",
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "chalk": "^1.0.0",
    "lodash": "^4.0.1",
    "maxmin": "^1.1.0",
    "uglify-js": "~2.6.2",
    "uri-path": "^1.0.0"
  },
  "devDependencies": {
    "grunt": "^1.0.0",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-contrib-internal": "^1.1.0",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-contrib-nodeunit": "^1.0.0"
  },
  "keywords": [
    "gruntplugin"
  ],
  "files": [
    "tasks"
  ],
  "appveyor_id": "ybtf5vbvtenii561",
  "readme": "# grunt-contrib-uglify v1.0.2 [![Build Status: Linux](https://travis-ci.org/gruntjs/grunt-contrib-uglify.svg?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-uglify) [![Build Status: Windows](https://ci.appveyor.com/api/projects/status/ybtf5vbvtenii561/branch/master?svg=true)](https://ci.appveyor.com/project/gruntjs/grunt-contrib-uglify/branch/master)\r\n\r\n> Minify javascript files with UglifyJS\r\n\r\n\r\n\r\n## Getting Started\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-contrib-uglify --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-contrib-uglify');\r\n```\r\n\r\n\r\n\r\n\r\n## Uglify task\r\n_Run this task with the `grunt uglify` command._\r\n\r\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\r\n\r\n### Migrating from 2.x to 3.x\r\n\r\nVersion `3.x` introduced changes to configuring source maps. Accordingly, if you don't use the source map options you should be able to upgrade seamlessly. If you do use source maps, see below.\r\n\r\n#### Removed options\r\n\r\n`sourceMappingURL` - This is calculated automatically now\r\n`sourceMapPrefix` - No longer necessary for the above reason\r\n\r\n#### Changed options\r\n\r\n`sourceMap` - Only accepts a `Boolean` value. Generates a map with a default name for you\r\n`sourceMapRoot` - The location of your sources is now calculated for you when `sourceMap` is set to `true` but you can set manual source root if needed\r\n\r\n#### New options\r\n\r\n`sourceMapName` - Accepts a string or function to change the location or name of your map\r\n`sourceMapIncludeSources` - Embed the content of your source files directly into the map\r\n`expression` - Accepts a `Boolean` value. Parse a single expression (JSON or single functions)\r\n`quoteStyle` - Accepts integers `0` (default), `1`, `2`, `3`. Enforce or preserve quotation mark style.\r\n\r\n### Options\r\n\r\nThis task primarily delegates to [UglifyJS2][], so please consider the [UglifyJS documentation][] as required reading for advanced configuration.\r\n\r\n[UglifyJS2]: https://github.com/mishoo/UglifyJS2\r\n[UglifyJS documentation]: http://lisperator.net/uglifyjs/\r\n\r\n\r\n#### mangle\r\nType: `Boolean` `Object`  \r\nDefault: `{}`\r\n\r\nTurn on or off mangling with default options. If an `Object` is specified, it is passed directly to `ast.mangle_names()` *and* `ast.compute_char_frequency()` (mimicking command line behavior). [View all options here](https://github.com/mishoo/UglifyJS2#mangler-options).\r\n\r\n#### compress\r\nType: `Boolean` `Object`  \r\nDefault: `{}`\r\n\r\nTurn on or off source compression with default options. If an `Object` is specified, it is passed as options to `UglifyJS.Compressor()`. [View all options here](https://github.com/mishoo/UglifyJS2#compressor-options).\r\n\r\n#### beautify\r\nType: `Boolean` `Object`  \r\nDefault: `false`\r\n\r\nTurns on beautification of the generated source code. An `Object` will be merged and passed with the options sent to `UglifyJS.OutputStream()`. [View all options here](https://github.com/mishoo/UglifyJS2#beautifier-options)\r\n\r\n###### expression\r\nType: `Boolean`  \r\nDefault: `false`\r\n\r\nParse a single expression, rather than a program (for parsing JSON)\r\n\r\n#### report\r\nChoices: `'none'`, `'min'`, `'gzip'`\r\nDefault: `'min'`\r\n\r\nEither report only minification result or report minification and gzip results.\r\nThis is useful to see exactly how well UglifyJS is performing but using `'gzip'` will make the task take 5-10x longer to complete. [Example output](https://github.com/sindresorhus/maxmin#readme).\r\nIf `'none'` is used the report will be generated on the verbose output.\r\n\r\n#### sourceMap\r\nType: `Boolean`  \r\nDefault: `false`\r\n\r\nIf `true`, a source map file will be generated in the same directory as the `dest` file. By default it will have the same basename as the `dest` file, but with a `.map` extension.\r\n\r\n#### sourceMapName\r\nType: `String`  `Function`  \r\nDefault: `undefined`\r\n\r\nTo customize the name or location of the generated source map, pass a string to indicate where to write the source map to. If a function is provided, the uglify destination is passed as the argument and the return value will be used as the file name.\r\n\r\n#### sourceMapIn\r\nType: `String`  `Function`  \r\nDefault: `undefined`\r\n\r\nThe location of an input source map from an earlier compilation, e.g. from CoffeeScript. If a function is provided, the\r\nuglify source is passed as the argument and the return value will be used as the sourceMap name. This only makes sense\r\nwhen there's one source file.\r\n\r\n#### sourceMapIncludeSources\r\nType: `Boolean`  \r\nDefault: `false`\r\n\r\nPass this flag if you want to include the content of source files in the source map as sourcesContent property.\r\n\r\n###### sourceMapRoot\r\nType: `String`  \r\nDefault: `undefined`\r\n\r\nWith this option you can customize root URL that browser will use when looking for sources.\r\n\r\nIf the sources are not absolute URLs after prepending of the `sourceMapRoot`, the sources are resolved relative to the source map.\r\n\r\n#### sourceMapUrl\r\nType: `String`  \r\nDefault: `undefined`\r\n\r\nOverride the calculated value for `sourceMappingURL` in the source map. This is useful if the source map location is not relative to the base path of the minified file, i.e. when using a CDN\r\n\r\n###### enclose\r\nType: `Object`  \r\nDefault: `undefined`\r\n\r\nWrap all of the code in a closure with a configurable arguments/parameters list.\r\nEach key-value pair in the `enclose` object is effectively an argument-parameter pair.\r\n\r\n#### wrap\r\nType: `String`  \r\nDefault: `undefined`\r\n\r\nWrap all of the code in a closure, an easy way to make sure nothing is leaking.\r\nFor variables that need to be public `exports` and `global` variables are made available.\r\nThe value of wrap is the global variable exports will be available as.\r\n\r\n#### maxLineLen\r\nType: `Number`  \r\nDefault: `32000`\r\n\r\nLimit the line length in symbols. Pass maxLineLen = 0 to disable this safety feature.\r\n\r\n#### ASCIIOnly\r\nType: `Boolean`  \r\nDefault: `false`\r\n\r\nEnables to encode non-ASCII characters as \\uXXXX.\r\n\r\n#### exportAll\r\nType: `Boolean`  \r\nDefault: `false`\r\n\r\nWhen using `wrap` this will make all global functions and variables available via the export variable.\r\n\r\n#### preserveComments\r\nType: `Boolean` `String` `Function`  \r\nDefault: `undefined`  \r\nOptions: `false` `'all'` `'some'`\r\n\r\nTurn on preservation of comments.\r\n\r\n- `false` will strip all comments\r\n- `'all'` will preserve all comments in code blocks that have not been squashed or dropped\r\n- `'some'` will preserve all comments that start with a bang (`!`) or include a closure compiler style directive (`@preserve` `@license` `@cc_on`)\r\n- `Function` specify your own comment preservation function. You will be passed the current node and the current comment and are expected to return either `true` or `false`\r\n\r\n#### banner\r\nType: `String`  \r\nDefault: `''`\r\n\r\nThis string will be prepended to the minified output. Template strings (e.g. `<%= config.value %>` will be expanded automatically.\r\n\r\n#### footer\r\nType: `String`  \r\nDefault: `''`\r\n\r\nThis string will be appended to the minified output. Template strings (e.g. `<%= config.value %>` will be expanded automatically.\r\n\r\n#### screwIE8\r\nType: `Boolean`  \r\nDefault: `false`\r\n\r\nPass this flag if you don't care about full compliance with Internet Explorer 6-8 quirks.\r\n\r\n#### mangleProperties\r\nType: `Boolean` `Object`\r\nDefault: `false`\r\n\r\nTurn on or off property mangling with default options. If an `Object` is specified, it is passed directly to `ast.mangle_properties()` (mimicking command line behavior). [View all options here](https://github.com/mishoo/UglifyJS2#mangler-options).\r\n\r\n#### reserveDOMProperties\r\nType: `Boolean`  \r\nDefault: `false`\r\n\r\nUse this flag in conjunction with `mangleProperties` to prevent built-in browser object properties from being mangled.\r\n\r\n#### exceptionsFiles\r\nType: `Array`  \r\nDefault: `[]`\r\n\r\nUse this with `mangleProperties` to pass one or more JSON files containing a list of variables and object properties\r\nthat should not be mangled. See the [UglifyJS docs](https://www.npmjs.com/package/uglify-js) for more info on the file syntax.\r\n\r\n#### nameCache\r\nType: `String`  \r\nDefault: `''`\r\n\r\nA string that is a path to a JSON cache file that uglify will create and use to coordinate symbol mangling between\r\nmultiple runs of uglify. Note: this generated file uses the same JSON format as the `exceptionsFiles` files.\r\n\r\n#### quoteStyle\r\nType: `Integer`  \r\nDefault: `0`\r\n\r\nPreserve or enforce quotation mark style.\r\n\r\n* `0` will use single or double quotes such as to minimize the number of bytes (prefers double quotes when both will do)\r\n* `1` will always use single quotes\r\n* `2` will always use double quotes\r\n* `3` will preserve original quotation marks\r\n\r\n### Usage examples\r\n\r\n#### Basic compression\r\n\r\nThis configuration will compress and mangle the input files using the default options.\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  uglify: {\r\n    my_target: {\r\n      files: {\r\n        'dest/output.min.js': ['src/input1.js', 'src/input2.js']\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### No mangling\r\n\r\nSpecify `mangle: false` to prevent changes to your variable and function names.\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  uglify: {\r\n    options: {\r\n      mangle: false\r\n    },\r\n    my_target: {\r\n      files: {\r\n        'dest/output.min.js': ['src/input.js']\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Reserved identifiers\r\n\r\nYou can specify identifiers to leave untouched with an `except` array in the `mangle` options.\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  uglify: {\r\n    options: {\r\n      mangle: {\r\n        except: ['jQuery', 'Backbone']\r\n      }\r\n    },\r\n    my_target: {\r\n      files: {\r\n        'dest/output.min.js': ['src/input.js']\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Source maps\r\n\r\nGenerate a source map by setting the `sourceMap` option to `true`. The generated\r\nsource map will be in the same directory as the destination file. Its name will be the\r\nbasename of the destination file with a `.map` extension. Override these\r\ndefaults with the `sourceMapName` attribute.\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  uglify: {\r\n    my_target: {\r\n      options: {\r\n        sourceMap: true,\r\n        sourceMapName: 'path/to/sourcemap.map'\r\n      },\r\n      files: {\r\n        'dest/output.min.js': ['src/input.js']\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Advanced source maps\r\n\r\nSet the `sourceMapIncludeSources` option to `true` to embed your sources directly into the map. To include\r\na source map from a previous compilation pass it as the value of the `sourceMapIn` option.\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  uglify: {\r\n    my_target: {\r\n      options: {\r\n        sourceMap: true,\r\n        sourceMapIncludeSources: true,\r\n        sourceMapIn: 'example/coffeescript-sourcemap.js', // input sourcemap from a previous compilation\r\n      },\r\n      files: {\r\n        'dest/output.min.js': ['src/input.js'],\r\n      },\r\n    },\r\n  },\r\n});\r\n```\r\n\r\nRefer to the [UglifyJS SourceMap Documentation](http://lisperator.net/uglifyjs/codegen#source-map) for more information.\r\n\r\n#### Turn off console warnings\r\n\r\nSpecify `drop_console: true` as part of the `compress` options to discard calls to `console.*` functions.\r\nThis will suppress warning messages in the console.\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  uglify: {\r\n    options: {\r\n      compress: {\r\n        drop_console: true\r\n      }\r\n    },\r\n    my_target: {\r\n      files: {\r\n        'dest/output.min.js': ['src/input.js']\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Beautify\r\n\r\nSpecify `beautify: true` to beautify your code for debugging/troubleshooting purposes.\r\nPass an object to manually configure any other output options passed directly to `UglifyJS.OutputStream()`.\r\n\r\nSee [UglifyJS Codegen documentation](http://lisperator.net/uglifyjs/codegen) for more information.\r\n\r\n_Note that manual configuration will require you to explicitly set `beautify: true` if you want traditional, beautified output._\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  uglify: {\r\n    my_target: {\r\n      options: {\r\n        beautify: true\r\n      },\r\n      files: {\r\n        'dest/output.min.js': ['src/input.js']\r\n      }\r\n    },\r\n    my_advanced_target: {\r\n      options: {\r\n        beautify: {\r\n          width: 80,\r\n          beautify: true\r\n        }\r\n      },\r\n      files: {\r\n        'dest/output.min.js': ['src/input.js']\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Banner comments\r\n\r\nIn this example, running `grunt uglify:my_target` will prepend a banner created by interpolating the `banner` template string with the config object. Here, those properties are the values imported from the `package.json` file (which are available via the `pkg` config property) plus today's date.\r\n\r\n_Note: you don't have to use an external JSON file. It's also valid to create the `pkg` object inline in the config. That being said, if you already have a JSON file, you might as well reference it._\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  pkg: grunt.file.readJSON('package.json'),\r\n  uglify: {\r\n    options: {\r\n      banner: '/*! <%= pkg.name %> - v<%= pkg.version %> - ' +\r\n        '<%= grunt.template.today(\"yyyy-mm-dd\") %> */'\r\n    },\r\n    my_target: {\r\n      files: {\r\n        'dest/output.min.js': ['src/input.js']\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Conditional compilation\r\n\r\nYou can also enable UglifyJS conditional compilation. This is commonly used to remove debug code blocks for production builds. This is equivalent to the command line [`--define` option](https://github.com/mishoo/UglifyJS#use-as-a-code-pre-processor).\r\n\r\nSee [UglifyJS global definitions documentation](http://lisperator.net/uglifyjs/compress#global-defs) for more information.\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  uglify: {\r\n    options: {\r\n      compress: {\r\n        global_defs: {\r\n          'DEBUG': false\r\n        },\r\n        dead_code: true\r\n      }\r\n    },\r\n    my_target: {\r\n      files: {\r\n        'dest/output.min.js': ['src/input.js']\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Compiling all files in a folder dynamically\r\n\r\nThis configuration will compress and mangle the files dynamically.\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  uglify: {\r\n    my_target: {\r\n      files: [{\r\n          expand: true,\r\n          cwd: 'src/js',\r\n          src: '**/*.js',\r\n          dest: 'dest/js'\r\n      }]\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Turn on object property name mangling\r\n\r\nThis configuration will turn on object property name mangling, but not mangle built-in browser object properties.\r\nAdditionally, variables and object properties listed in the `myExceptionsFile.json` will be mangled. For more info,\r\non the format of the exception file format please see the [UglifyJS docs](https://www.npmjs.com/package/uglify-js).\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  uglify: {\r\n    options: {\r\n      mangleProperties: true,\r\n      reserveDOMCache: true,\r\n      exceptionsFiles: [ 'myExceptionsFile.json' ]\r\n    },\r\n    my_target: {\r\n      files: {\r\n        'dest/output.min.js': ['src/input.js']\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Turn on use of name mangling cache\r\n\r\nTurn on use of name mangling cache to coordinate mangled symbols between outputted uglify files. uglify will the\r\ngenerate a JSON cache file with the name provided in the options. Note: this generated file uses the same JSON format\r\nas the `exceptionsFiles` files.\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  uglify: {\r\n    options: {\r\n      nameCache: '.tmp/grunt-uglify-cache.json',\r\n    },\r\n    my_target: {\r\n      files: {\r\n        'dest/output1.min.js': ['src/input1.js'],\r\n        'dest/output2.min.js': ['src/input2.js']\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n\r\n## Release History\r\n\r\n * 2016-03-19   v1.0.2   Update grunt to ^1.0.0. Fix `beautify` when passed as an object. Fix docs about `report` values.\r\n * 2016-03-16   v1.0.1   Downgrade maxmin for Node.js 0.10.\r\n * 2016-03-04   v1.0.0   Use uglify-js ~2.6.2 to fix sourcemap issue. Improve docs for `global-defs` and `--define` options. Add `sourceMapUrl` option. Add `bare_returns` option. Optionally set report verbosity level using report option.\r\n * 2016-01-29   v0.11.1   Update lodash to ^4.0.1. Update grunt-contrib-clean to ^0.7.0. Update grunt-contrib-jshint to ^0.12.0.\r\n * 2015-11-20   v0.11.0   Update uglify-js to ~2.6.0.\r\n * 2015-11-12   v0.10.1   Update uglify-js to ~2.5.\r\n * 2015-10-27   v0.10.0   Update uglify-js to ^2.5.\r\n * 2015-08-24   v0.9.2   Update uglify-js to ^2.4.24\r\n * 2015-04-07   v0.9.1   More fixes for `mangle` options.\r\n * 2015-04-07   v0.9.0   Add hook into uglify-js's mangling functionality.\r\n * 2015-03-30   v0.8.1   Lock uglify-js to 2.4.17 due to breaking changes.\r\n * 2015-02-19   v0.8.0   Add `screwIE8` option. Fix issue with explicit `compress` in Node.js 0.12.0.\r\n * 2014-12-23   v0.7.0   Add `sourceMapRoot` options. Update readme descriptions. Remove reference to clean-css.\r\n * 2014-09-17   v0.6.0   Output fixes. Add `ASCIIOnly` option. Other fixes.\r\n * 2014-07-25   v0.5.1   Update chalk to ^0.5.1. Output updates.\r\n * 2014-03-01   v0.4.0   Remove grunt-lib-contrib dependency and add more colors.\r\n * 2014-02-27   v0.3.3   Remove unnecessary calls to `grunt.template.process`.\r\n * 2014-01-22   v0.3.2   Fix handling of `sourceMapIncludeSources` option.\r\n * 2014-01-20   v0.3.1   Fix relative path issue in sourcemaps.\r\n * 2014-01-16   v0.3.0   Refactor sourcemap support.\r\n * 2013-11-09   v0.2.7   Prepend banner if `sourceMap` option not set, addresses #109.\r\n * 2013-11-08   v0.2.6   Merge #45, #53, #85 (#105 by way of duping #53). Add support for banners in uglified files with sourcemaps. Update docs.\r\n * 2013-10-28   v0.2.5   Add warning for banners when using sourcemaps.\r\n * 2013-09-02   v0.2.4   Update sourcemap format via #83.\r\n * 2013-06-10   v0.2.3   Add `footer` option.\r\n * 2013-05-31   v0.2.2   Revert #56 due to #58 until [chrome/239660](https://code.google.com/p/chromium/issues/detail?id=239660&q=sourcemappingurl&colspec=ID%20Pri%20M%20Iteration%20ReleaseBlock%20Cr%20Status%20Owner%20Summary%20OS%20Modified) [firefox/870361](https://bugzilla.mozilla.org/show_bug.cgi?id=870361) drop.\r\n * 2013-05-22   v0.2.1   Update uglify-js to ~2.3.5 #55 #40. Change `sourcemappingUrl` syntax #56. Disable sorting of names for consistent mangling #44. Update docs for `sourceMapRoot` #47 #25.\r\n * 2013-03-14   v0.2.0   No longer report gzip results by default. Support `report` option.\r\n * 2013-01-30   v0.1.2   Add better error reporting. Support for dynamic names of multiple sourcemaps.\r\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\r\n * 2013-01-18   v0.1.1rc6   Update grunt/gruntplugin dependencies to rc6. Change in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\r\n * 2013-01-09   v0.1.1rc5   Update to work with grunt v0.4.0rc5. Switch back to `this.files` API.\r\n * 2012-11-28   v0.1.0   Work in progress, not officially released yet.\r\n\r\n---\r\n\r\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com)\r\n\r\n*This file was generated on Tue Jul 19 2016 16:34:56.*\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gruntjs/grunt-contrib-uglify/issues"
  },
  "_id": "grunt-contrib-uglify@1.0.2",
  "dist": {
    "shasum": "ca7a1facfc0c85e1a47539ec2633982ab20d4a28"
  },
  "_from": "grunt-contrib-uglify@~1.0.2",
  "_resolved": "https://registry.npmjs.org/grunt-contrib-uglify/-/grunt-contrib-uglify-1.0.2.tgz"
}
